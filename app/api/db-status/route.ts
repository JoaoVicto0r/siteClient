import { PrismaClient } from "@prisma/client";

// Define um tipo global para armazenar o client em desenvolvimento
const globalForPrisma = globalThis as unknown as {
  prisma?: PrismaClient;
};

// Cria nova inst√¢ncia do Prisma Client
function createPrismaClient(): PrismaClient {
  const client = new PrismaClient({
    log: [
      { emit: "stdout", level: "error" },
      { emit: "stdout", level: "warn" },
      { emit: "stdout", level: "info" },
      { emit: "event", level: "query" },
    ],
  });

  // Apenas em desenvolvimento: log detalhado de queries
  if (process.env.NODE_ENV === "development") {
    client.$on("query", (e) => {
      console.log("üì¶ Prisma Query:", e.query);
      console.log("üìé Params:", e.params);
      console.log("‚è±Ô∏è Duration:", `${e.duration}ms`);
    });
  }

  return client;
}

// Usa inst√¢ncia √∫nica em dev para evitar problemas de hot reload
export const db = globalForPrisma.prisma ?? createPrismaClient();

if (process.env.NODE_ENV !== "production") {
  globalForPrisma.prisma = db;
}

// Verifica se o Prisma est√° funcionando corretamente
export async function isPrismaClientAvailable(): Promise<boolean> {
  try {
    await db.$queryRawUnsafe("SELECT 1"); // queryRawUnsafe para evitar erros de tag template
    return true;
  } catch (error) {
    console.error("‚ùå Prisma Client indispon√≠vel:", error);
    return false;
  }
}

// Fun√ß√£o para tentar reconectar manualmente
export async function reconnectPrisma(): Promise<boolean> {
  try {
    await db.$disconnect();
    await db.$connect();
    return true;
  } catch (error) {
    console.error("‚ùå Falha ao reconectar Prisma Client:", error);
    return false;
  }
}

// Trata rejei√ß√µes n√£o capturadas globalmente
process.on("unhandledRejection", (reason) => {
  console.error("‚ö†Ô∏è Rejei√ß√£o n√£o tratada:", reason);
});
